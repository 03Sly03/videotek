name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Exécute le pipeline uniquement lors des push sur la branche 'main'
  pull_request:
    branches:
      - main  # Exécute le pipeline lors des PR vers la branche 'main'

jobs:
  # Job de construction de l'image Docker
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2  # Récupère le code source du dépôt

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1  # Configure Docker Buildx pour la construction multiplateforme

    - name: Log in to DockerHub
      uses: docker/login-action@v2  # Connexion à Docker Hub (ou autre registre)
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and Push Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/videotek:latest .  # Construire l'image Docker avec le tag
        docker push ${{ secrets.DOCKER_USERNAME }}/videotek:latest  # Pousser l'image vers Docker Hub (ou un autre registre)

  # Job de déploiement
  deploy:
    needs: build  # Ce job dépend du job de construction
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2  # Récupère le code source du dépôt

    - name: SSH into VPS and deploy
      uses: appleboy/ssh-action@v0.1.6  # Utilisation de l'action SSH pour se connecter au VPS
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_PRIVATE_KEY }}
        port: 31129
        script: |
          # Stopper et supprimer l'ancien conteneur Docker
          docker stop videotek || true
          docker rm videotek || true

          # Télécharger la dernière image depuis Docker Hub
          docker pull ${{ secrets.DOCKER_USERNAME }}/videotek:latest

          # Lancer le conteneur avec la dernière image
          docker run -d --name videotek --network my-network ${{ secrets.DOCKER_USERNAME }}/videotek:latest
